<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>黄智守的博客</title>
    <link>https://www.huangzhishou.com/</link>
    <description>Recent content on 黄智守的博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Fri, 17 Jun 2022 11:41:39 +0800</lastBuildDate><atom:link href="https://www.huangzhishou.com/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>深入JavaScript高级语法之创建对象方案</title>
      <link>https://www.huangzhishou.com/post/%E6%B7%B1%E5%85%A5JavaScript%E9%AB%98%E7%BA%A7%E8%AF%AD%E6%B3%95%E4%B9%8B%E5%88%9B%E5%BB%BA%E5%AF%B9%E8%B1%A1%E6%96%B9%E6%A1%88.html</link>
      <pubDate>Fri, 17 Jun 2022 11:41:39 +0800</pubDate>
      
      <guid>https://www.huangzhishou.com/post/%E6%B7%B1%E5%85%A5JavaScript%E9%AB%98%E7%BA%A7%E8%AF%AD%E6%B3%95%E4%B9%8B%E5%88%9B%E5%BB%BA%E5%AF%B9%E8%B1%A1%E6%96%B9%E6%A1%88.html</guid>
      <description>深入JavaScript高级语法之创建对象方案 原型与构造函数 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 function Person(name, age, height, address) { this.name = name this.age = age this.height = height this.address = address } Person.prototype.eating = function() { console.log(this.name + &amp;#39;在吃东西&amp;#39;) } Person.prototype.running = function() { console.log(this.name + &amp;#39;在跑步&amp;#39;) } var p1 = new Person(&amp;#39;zhishouh&amp;#39;, 20, 1.88, &amp;#39;广州市&amp;#39;) var p2 = new Person(&amp;#39;hn&amp;#39;, 21,</description>
    </item>
    
    <item>
      <title>深入JavaScript高级语法之创建对象</title>
      <link>https://www.huangzhishou.com/post/%E6%B7%B1%E5%85%A5JavaScript%E9%AB%98%E7%BA%A7%E8%AF%AD%E6%B3%95%E4%B9%8B%E5%88%9B%E5%BB%BA%E5%AF%B9%E8%B1%A1.html</link>
      <pubDate>Thu, 09 Jun 2022 10:10:42 +0800</pubDate>
      
      <guid>https://www.huangzhishou.com/post/%E6%B7%B1%E5%85%A5JavaScript%E9%AB%98%E7%BA%A7%E8%AF%AD%E6%B3%95%E4%B9%8B%E5%88%9B%E5%BB%BA%E5%AF%B9%E8%B1%A1.html</guid>
      <description>深入JavaScript高级语法之创建对象 工厂模式(工厂函数) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 function createPerson(name, age, height, address) { return { name, age, height, address, eating() { console.log(this.name + &amp;#39;在吃东西&amp;#39;) }, running() { conosle.log(this.name + &amp;#39;在跑步&amp;#39;) } } } var p1 = createPerson(&amp;#39;zhishouh&amp;#39;, 20, 1.88, &amp;#39;广州市&amp;#39;) console.log(p1) // { // name: &amp;#39;zhishouh&amp;#39;, // age: 21, // height:</description>
    </item>
    
    <item>
      <title>深入JavaScript高级语法之对象</title>
      <link>https://www.huangzhishou.com/post/%E6%B7%B1%E5%85%A5JavaScript%E9%AB%98%E7%BA%A7%E8%AF%AD%E6%B3%95%E4%B9%8B%E5%AF%B9%E8%B1%A1.html</link>
      <pubDate>Thu, 09 Jun 2022 09:28:06 +0800</pubDate>
      
      <guid>https://www.huangzhishou.com/post/%E6%B7%B1%E5%85%A5JavaScript%E9%AB%98%E7%BA%A7%E8%AF%AD%E6%B3%95%E4%B9%8B%E5%AF%B9%E8%B1%A1.html</guid>
      <description>深入JavaScript高级语法之对象 对象写法 写法一 1 2 3 4 5 6 var obj = new Object() obj.name = &amp;#39;zhishouh&amp;#39; obj.age = 20 obj.address = &amp;#39;广州市&amp;#39; console.log(obj) // { name: &amp;#39;zhishouh&amp;#39;, age: 20, address: &amp;#39;广州市&amp;#39; } 写法二 1 2 3 4 5 6 7 var obj = { name: &amp;#39;zhishouh&amp;#39;, age: 20, address: &amp;#39;广州市&amp;#39; } console.log(obj) // { name: &amp;#39;zhishouh&amp;#39;, age: 20, address: &amp;#39;广州市&amp;#39;} 数据属性描</description>
    </item>
    
    <item>
      <title>深入JavaScript高级语法之with Eval Strict</title>
      <link>https://www.huangzhishou.com/post/%E6%B7%B1%E5%85%A5JavaScript%E9%AB%98%E7%BA%A7%E8%AF%AD%E6%B3%95%E4%B9%8Bwith-eval-strict.html</link>
      <pubDate>Thu, 09 Jun 2022 09:11:10 +0800</pubDate>
      
      <guid>https://www.huangzhishou.com/post/%E6%B7%B1%E5%85%A5JavaScript%E9%AB%98%E7%BA%A7%E8%AF%AD%E6%B3%95%E4%B9%8Bwith-eval-strict.html</guid>
      <description>深入JavaScript高级语法之with Eval Strict with语句 with语句会形成作用域 是混淆错误和兼容性问题的根源 1 2 3 4 5 6 7 8 9 10 11 12 13 14 var message = &amp;#39;window hello&amp;#39; var obj = { message: &amp;#39;obj hello&amp;#39; } function foo() { function bar() { with(obj) { console.log(message) } } bar() } foo() // obj hello eval函数 将传入的字符串当作JavaScript代码运行 可读性差 执行过程可能被可</description>
    </item>
    
    <item>
      <title>深入JavaScript高级语法之组合函数</title>
      <link>https://www.huangzhishou.com/post/%E6%B7%B1%E5%85%A5JavaScript%E9%AB%98%E7%BA%A7%E8%AF%AD%E6%B3%95%E4%B9%8B%E7%BB%84%E5%90%88%E5%87%BD%E6%95%B0.html</link>
      <pubDate>Wed, 08 Jun 2022 10:52:29 +0800</pubDate>
      
      <guid>https://www.huangzhishou.com/post/%E6%B7%B1%E5%85%A5JavaScript%E9%AB%98%E7%BA%A7%E8%AF%AD%E6%B3%95%E4%B9%8B%E7%BB%84%E5%90%88%E5%87%BD%E6%95%B0.html</guid>
      <description>深入JavaScript高级语法之组合函数 组合函数 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 function double(x) { return x * 2 } function square(y) { return y ** 2 } function composFn(m, n) { return function(count) { return n(m(count)) } } var newFn = composFn(double, square) console.log(newFn(10)) // 400 实现自动化组合函数 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 function myCompose(...fns) { var length = fns.length for(var i = 0; i &amp;lt; length; i++) { if(typeof fns[i] !== &amp;#39;function&amp;#39;) { throw new TypeError(&amp;#34;Expected arguments are functions&amp;#34;)</description>
    </item>
    
    <item>
      <title>深入JavaScript高级语法之柯里化函数的实现</title>
      <link>https://www.huangzhishou.com/post/%E6%B7%B1%E5%85%A5JavaScript%E9%AB%98%E7%BA%A7%E8%AF%AD%E6%B3%95%E4%B9%8B%E6%9F%AF%E9%87%8C%E5%8C%96%E5%87%BD%E6%95%B0%E7%9A%84%E5%AE%9E%E7%8E%B0.html</link>
      <pubDate>Tue, 07 Jun 2022 17:02:52 +0800</pubDate>
      
      <guid>https://www.huangzhishou.com/post/%E6%B7%B1%E5%85%A5JavaScript%E9%AB%98%E7%BA%A7%E8%AF%AD%E6%B3%95%E4%B9%8B%E6%9F%AF%E9%87%8C%E5%8C%96%E5%87%BD%E6%95%B0%E7%9A%84%E5%AE%9E%E7%8E%B0.html</guid>
      <description>深入JavaScript高级语法之柯里化函数的实现 自动柯里化函数的实现 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 function myCurrying(fn) { function curried1(...args1) { // 判断当前接收的参数个数与函数本身需要接收的个数是否一致 if(args1.length &amp;gt;= fn.length) { return fn.apply(this, args1) } else { function curried2(...args2) { return curried1.apply(this, [...args1, ...args2]) } return curried2 } } return curried1 } function add(x, y, z) { return x + y + z } var curryAdd = myCurrying(add) console.log(curryAdd(10, 20, 30)) // 60 console.log(curryAdd(10, 20)(30))</description>
    </item>
    
    <item>
      <title>深入JavaScript高级语法之函数柯里化</title>
      <link>https://www.huangzhishou.com/post/%E6%B7%B1%E5%85%A5JavaScript%E9%AB%98%E7%BA%A7%E8%AF%AD%E6%B3%95%E4%B9%8B%E5%87%BD%E6%95%B0%E6%9F%AF%E9%87%8C%E5%8C%96.html</link>
      <pubDate>Wed, 01 Jun 2022 14:14:29 +0800</pubDate>
      
      <guid>https://www.huangzhishou.com/post/%E6%B7%B1%E5%85%A5JavaScript%E9%AB%98%E7%BA%A7%E8%AF%AD%E6%B3%95%E4%B9%8B%E5%87%BD%E6%95%B0%E6%9F%AF%E9%87%8C%E5%8C%96.html</guid>
      <description>深入JavaScript高级语法之函数柯里化 函数柯里化 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 function sum(x) { return function(y) { return function(z) { return x + y + z } } } var result = sum(10)(20)(30) console.log(result) // 60 // 简化柯里化函数 function sum2 = x =&amp;gt; y =&amp;gt; z =&amp;gt; x + y + z console.log(sum2(10)(20)(30)) // 60 函数柯里化 —— 单一职责的原则 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 function add(x, y, z) { x = x + 2 y = y + 2</description>
    </item>
    
    <item>
      <title>深入JavaScript高级语法之纯函数</title>
      <link>https://www.huangzhishou.com/post/%E6%B7%B1%E5%85%A5JavaScript%E9%AB%98%E7%BA%A7%E8%AF%AD%E6%B3%95%E4%B9%8B%E7%BA%AF%E5%87%BD%E6%95%B0.html</link>
      <pubDate>Wed, 01 Jun 2022 14:05:33 +0800</pubDate>
      
      <guid>https://www.huangzhishou.com/post/%E6%B7%B1%E5%85%A5JavaScript%E9%AB%98%E7%BA%A7%E8%AF%AD%E6%B3%95%E4%B9%8B%E7%BA%AF%E5%87%BD%E6%95%B0.html</guid>
      <description>深入JavaScript高级语法之纯函数 纯函数 确定的输入，一定会产生确定的输出 函数在执行过程中，不能产生副作用 1 2 3 4 5 6 7 8 9 10 11 var names = [&amp;#39;abc&amp;#39;, &amp;#39;bbc&amp;#39;, &amp;#39;cbc&amp;#39;, &amp;#39;dbc&amp;#39;] // 纯函数 slice 截取，不会对原数组有所改动 var newNames = names.slice(0, 2) console.log(newNames) // [&amp;#39;abc&amp;#39;, &amp;#39;bbc&amp;#39;] console.lgo(names) // [&amp;#39;abc&amp;#39;, &amp;#39;bbc&amp;#39;, &amp;#39;cbc&amp;#39;, &amp;#39;dbc&amp;#39;] // 非纯函数 splice 截取并删除 var newNames2 = names.splice(2,1) console.log(newNames2) // [&amp;#39;cbc&amp;#39;] console.log(names) // [&amp;#39;abc&amp;#39;, &amp;#39;bbc&amp;#39;, &amp;#39;dbc&amp;#39;] 1 2 3 4 5 6 7 8 9 // 举</description>
    </item>
    
    <item>
      <title>深入JavaScript高级语法之实现bind</title>
      <link>https://www.huangzhishou.com/post/%E6%B7%B1%E5%85%A5JavaScript%E9%AB%98%E7%BA%A7%E8%AF%AD%E6%B3%95%E4%B9%8B%E5%AE%9E%E7%8E%B0bind.html</link>
      <pubDate>Tue, 31 May 2022 11:58:46 +0800</pubDate>
      
      <guid>https://www.huangzhishou.com/post/%E6%B7%B1%E5%85%A5JavaScript%E9%AB%98%E7%BA%A7%E8%AF%AD%E6%B3%95%E4%B9%8B%E5%AE%9E%E7%8E%B0bind.html</guid>
      <description>深入JavaScript高级语法之实现bind 实现一个bind 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 Function.prototype.mybind = function (thisArg, ...argArray) { // 获取被执行的函数 var fn = this // 对thisArg转成对象类型(防止传入的是非对象类型) thisArg = (thisArg !== null &amp;amp;&amp;amp; thisArg !== undefined) ? Object(thisArg) : window // 调用被执行的函数 return function (...args) { thisArg.fn =</description>
    </item>
    
    <item>
      <title>深入JavaScript高级语法之实现apply</title>
      <link>https://www.huangzhishou.com/post/%E6%B7%B1%E5%85%A5JavaScript%E9%AB%98%E7%BA%A7%E8%AF%AD%E6%B3%95%E4%B9%8B%E5%AE%9E%E7%8E%B0apply.html</link>
      <pubDate>Tue, 31 May 2022 10:49:19 +0800</pubDate>
      
      <guid>https://www.huangzhishou.com/post/%E6%B7%B1%E5%85%A5JavaScript%E9%AB%98%E7%BA%A7%E8%AF%AD%E6%B3%95%E4%B9%8B%E5%AE%9E%E7%8E%B0apply.html</guid>
      <description>深入JavaScript高级语法之实现apply 实现一个apply 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 Function.prototype.myapply = function (thisArg, argArray) { // 获取被执行的函数 var fn = thisx // 对thisArg转成对象类型(防止传入的是非对象类型) thisArg = (thisArg !== null &amp;amp;&amp;amp; thisArg !== undefined) ? Object(thisArg) : window // 调用被执行的函数 thisArg.fn = fn argArray =</description>
    </item>
    
    <item>
      <title>深入JavaScript高级语法之实现call</title>
      <link>https://www.huangzhishou.com/post/%E6%B7%B1%E5%85%A5JavaScript%E9%AB%98%E7%BA%A7%E8%AF%AD%E6%B3%95%E4%B9%8B%E5%AE%9E%E7%8E%B0call.html</link>
      <pubDate>Tue, 24 May 2022 17:38:08 +0800</pubDate>
      
      <guid>https://www.huangzhishou.com/post/%E6%B7%B1%E5%85%A5JavaScript%E9%AB%98%E7%BA%A7%E8%AF%AD%E6%B3%95%E4%B9%8B%E5%AE%9E%E7%8E%B0call.html</guid>
      <description>深入JavaScript高级语法之实现call 实现一个call 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 Function.prototype.mycall = function (thisArg, ...args /*剩余参数*/) { // 获取被执行的函数 var fn = this // 对thisArg转成对象类型(防止传入的是非对象类型) thisArg = (thisArg !== null &amp;amp;&amp;amp; thisArg !== undefined) ? Object(thisArg) : window // 调用被执行</description>
    </item>
    
    <item>
      <title>深入JavaScript高级语法之关于this的练习题</title>
      <link>https://www.huangzhishou.com/post/%E6%B7%B1%E5%85%A5JavaScript%E9%AB%98%E7%BA%A7%E8%AF%AD%E6%B3%95%E4%B9%8B%E5%85%B3%E4%BA%8Ethis%E7%9A%84%E7%BB%83%E4%B9%A0%E9%A2%98.html</link>
      <pubDate>Mon, 23 May 2022 14:01:25 +0800</pubDate>
      
      <guid>https://www.huangzhishou.com/post/%E6%B7%B1%E5%85%A5JavaScript%E9%AB%98%E7%BA%A7%E8%AF%AD%E6%B3%95%E4%B9%8B%E5%85%B3%E4%BA%8Ethis%E7%9A%84%E7%BB%83%E4%B9%A0%E9%A2%98.html</guid>
      <description>深入JavaScript高级语法之关于this的练习题 练习题一 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 var name = &amp;#39;window&amp;#39; var person = { name: &amp;#39;person&amp;#39;, sayName: function () { console.log(this.name) } } function sayName () { var test = person.sayName test() // window 默认绑定(独立函数调用) person.sayName(); // person 隐式绑定 (person.sayName)(); // person 隐式绑定 (b = person.sayName)() // window 间接函数调用(独立函数调用) } sayName() 练习题二 1 2 3 4 5 6 7 8 9 10 11 12</description>
    </item>
    
    <item>
      <title>深入JavaScript高级语法之箭头函数的使用</title>
      <link>https://www.huangzhishou.com/post/%E6%B7%B1%E5%85%A5JavaScript%E9%AB%98%E7%BA%A7%E8%AF%AD%E6%B3%95%E4%B9%8B%E7%AE%AD%E5%A4%B4%E5%87%BD%E6%95%B0%E7%9A%84%E4%BD%BF%E7%94%A8.html</link>
      <pubDate>Mon, 23 May 2022 13:36:17 +0800</pubDate>
      
      <guid>https://www.huangzhishou.com/post/%E6%B7%B1%E5%85%A5JavaScript%E9%AB%98%E7%BA%A7%E8%AF%AD%E6%B3%95%E4%B9%8B%E7%AE%AD%E5%A4%B4%E5%87%BD%E6%95%B0%E7%9A%84%E4%BD%BF%E7%94%A8.html</guid>
      <description>深入JavaScript高级语法之箭头函数的使用 编写箭头函数 1 2 3 4 5 6 7 8 var foo = () =&amp;gt; { } //在高阶函数中使用箭头函数 var nums = [10, 20, 30] var result = nums.filter(item =&amp;gt; item % 2 === 0) .map(item =&amp;gt; item * 10) .reduce((prevValue, item) =&amp;gt; prevValue + item) console.log(result) // 600 箭头函数的简写规则 1 2 3 4 5 6 // 1、参数只有一个时，()可以省略 // 2、函数体只有一行代码时，{}可以省</description>
    </item>
    
    <item>
      <title>深入JavaScript高级语法之this的绑定规则</title>
      <link>https://www.huangzhishou.com/post/%E6%B7%B1%E5%85%A5JavaScript%E9%AB%98%E7%BA%A7%E8%AF%AD%E6%B3%95%E4%B9%8Bthis%E7%9A%84%E7%BB%91%E5%AE%9A%E8%A7%84%E5%88%99.html</link>
      <pubDate>Mon, 23 May 2022 09:46:29 +0800</pubDate>
      
      <guid>https://www.huangzhishou.com/post/%E6%B7%B1%E5%85%A5JavaScript%E9%AB%98%E7%BA%A7%E8%AF%AD%E6%B3%95%E4%B9%8Bthis%E7%9A%84%E7%BB%91%E5%AE%9A%E8%A7%84%E5%88%99.html</guid>
      <description>深入JavaScript高级语法之this的绑定规则 this的四个绑定规则 默认绑定 1 2 3 4 5 6 7 8 9 function foo() { return function bar() { console.log(this) } } var fn = foo() fn() // window 隐式绑定 1 2 3 4 5 6 7 8 9 10 11 12 13 var foo1 = { name: &amp;#39;foo1&amp;#39;, fn: function() { console.log(this.name) } } var foo2 = { name: &amp;#39;foo2&amp;#39;, fn: foo1.fn } foo2.fn() // foo2 显示绑定 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28</description>
    </item>
    
    <item>
      <title>深入JavaScript高级语法之闭包</title>
      <link>https://www.huangzhishou.com/post/%E6%B7%B1%E5%85%A5JavaScript%E9%AB%98%E7%BA%A7%E8%AF%AD%E6%B3%95%E4%B9%8B%E9%97%AD%E5%8C%85.html</link>
      <pubDate>Mon, 23 May 2022 09:33:38 +0800</pubDate>
      
      <guid>https://www.huangzhishou.com/post/%E6%B7%B1%E5%85%A5JavaScript%E9%AB%98%E7%BA%A7%E8%AF%AD%E6%B3%95%E4%B9%8B%E9%97%AD%E5%8C%85.html</guid>
      <description>深入JavaScript高级语法之闭包 闭包 = 函数 + 可以访问的自由变量 1 2 3 4 5 6 7 8 9 10 11 function foo() { var fnName = &amp;#39;foo&amp;#39; function bar() { console.log(&amp;#39;bar&amp;#39;,fcName) } return bar } var fn = foo() fn() // bar foo 总结 一个普通的函数function，如果可以访问外层作用域的自由变量，那么该函数就是一个闭包 从广义上：JavaScript的函数都是闭包 从狭义上</description>
    </item>
    
    <item>
      <title>深入JavaScript高级语法之数组中的方法</title>
      <link>https://www.huangzhishou.com/post/%E6%B7%B1%E5%85%A5JavaScript%E9%AB%98%E7%BA%A7%E8%AF%AD%E6%B3%95%E4%B9%8B%E6%95%B0%E7%BB%84%E4%B8%AD%E7%9A%84%E6%96%B9%E6%B3%95.html</link>
      <pubDate>Fri, 20 May 2022 10:29:01 +0800</pubDate>
      
      <guid>https://www.huangzhishou.com/post/%E6%B7%B1%E5%85%A5JavaScript%E9%AB%98%E7%BA%A7%E8%AF%AD%E6%B3%95%E4%B9%8B%E6%95%B0%E7%BB%84%E4%B8%AD%E7%9A%84%E6%96%B9%E6%B3%95.html</guid>
      <description>深入JavaScript高级语法之数组中的方法 函数与方法的定义 函数function：独立的function称之为函数，例：function foo() {} 方法method：当一个函数存在于某一个对象时，称之为这个函数是该对象的方法，例：var obj = {foo: function(){}} obj.foo() 数组中的方法(高阶函数) filter方法</description>
    </item>
    
    <item>
      <title>深入JavaScript高级语法之高阶函数</title>
      <link>https://www.huangzhishou.com/post/%E6%B7%B1%E5%85%A5JavaScript%E9%AB%98%E7%BA%A7%E8%AF%AD%E6%B3%95%E4%B9%8B%E9%AB%98%E9%98%B6%E5%87%BD%E6%95%B0.html</link>
      <pubDate>Fri, 20 May 2022 10:04:09 +0800</pubDate>
      
      <guid>https://www.huangzhishou.com/post/%E6%B7%B1%E5%85%A5JavaScript%E9%AB%98%E7%BA%A7%E8%AF%AD%E6%B3%95%E4%B9%8B%E9%AB%98%E9%98%B6%E5%87%BD%E6%95%B0.html</guid>
      <description>深入JavaScript高级语法之高阶函数 高阶函数的定义 函数接受另一个函数作为参数 函数返回另一个函数作为返回值 函数接受另一个函数作为参数 1 2 3 4 5 6 7 8 9 function foo(fn) { fn() } function bar() { console.log(&amp;#39;bar&amp;#39;) } foo(bar) // bar 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 function calc(num1,num2,calcFn) { console.log(calcFn(num1,num2)) } function add(num1,num2) { return num1 + num2 } function sub(num1,num2) { return num1 - num2 } function mul(num1,num2) { return num1 *</description>
    </item>
    
    <item>
      <title>深入JavaScript高级语法之作用域提升</title>
      <link>https://www.huangzhishou.com/post/%E6%B7%B1%E5%85%A5JavaScript%E9%AB%98%E7%BA%A7%E8%AF%AD%E6%B3%95%E4%B9%8B%E4%BD%9C%E7%94%A8%E5%9F%9F%E6%8F%90%E5%8D%87.html</link>
      <pubDate>Fri, 20 May 2022 09:12:18 +0800</pubDate>
      
      <guid>https://www.huangzhishou.com/post/%E6%B7%B1%E5%85%A5JavaScript%E9%AB%98%E7%BA%A7%E8%AF%AD%E6%B3%95%E4%B9%8B%E4%BD%9C%E7%94%A8%E5%9F%9F%E6%8F%90%E5%8D%87.html</guid>
      <description>深入JavaScript高级语法之作用域提升 理解 函数执行 作用域链 示例一 1 2 3 4 5 6 7 8 var n = 10 function foo() { n = 20 } foo() console.log(n) // 20 示例二 1 2 3 4 5 6 7 8 9 10 function foo() { console.log(n) var n = 10 console.log(n) } var n = 20 foo() // undefined // 10 示例三 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 var n = 100 function foo1() { console.log(n) } function foo2() { var n = 200 console.log(n) foo1() } foo2() console.log(n) // 200 // 100 // 100 示例四 1 2</description>
    </item>
    
    <item>
      <title>Learn React 07</title>
      <link>https://www.huangzhishou.com/post/Learn-React-07.html</link>
      <pubDate>Thu, 10 Feb 2022 10:15:45 +0800</pubDate>
      
      <guid>https://www.huangzhishou.com/post/Learn-React-07.html</guid>
      <description>消息订阅-发布机制 React中兄弟组件或深层次组件之间的通信 工具库：PubSubJS 下载：npm i pubsub-js &amp;ndash;save 使用： import PubSub from &amp;lsquo;pubsub-js&amp;rsquo; //引入 PubSub.subscribe(&amp;lsquo;delete&amp;rsquo;, function(data){ }); //订阅消息 PubSub.publish(&amp;lsquo;delete&amp;rsquo;, data) //发布消息 List组件订阅消息 1 2 3 4 5 6 7 8 componentDidMount(){ this.token = PubSub.subscribe(&amp;#39;searchData&amp;#39;,(_,stateObj)=&amp;gt;{ this.setState(stateObj) }) } componentWillUnmount(){ PubSub.unsubscribe(this.token) } Search组件发布消息 1 PubSub.publish(&amp;#39;searchData&amp;#39;,{isLoading:false,users:response.data.items})</description>
    </item>
    
    <item>
      <title>Learn React 06</title>
      <link>https://www.huangzhishou.com/post/Learn-React-06.html</link>
      <pubDate>Tue, 08 Feb 2022 17:48:02 +0800</pubDate>
      
      <guid>https://www.huangzhishou.com/post/Learn-React-06.html</guid>
      <description>react 脚手架配置代理 方法一 在 package.json 中追加如下配置 &amp;quot;proxy&amp;quot;:&amp;quot;http://localhost:5000&amp;quot; 说明： 优点：配置简单，前端请求资源时可以不加任何前缀。 缺点：不能配置多个代理。 工作方式：上述方式配置代理，当请求了3000不存在的资源时，那么该请求会转发给5000 （优先匹配前端资源） 方法二 第一步：创建代理配置文件 1 在src下创建配置文件</description>
    </item>
    
    <item>
      <title>Learn React 05</title>
      <link>https://www.huangzhishou.com/post/Learn-React-05.html</link>
      <pubDate>Tue, 08 Feb 2022 11:42:31 +0800</pubDate>
      
      <guid>https://www.huangzhishou.com/post/Learn-React-05.html</guid>
      <description>用 create-react-app 编写 todo-list 示例效果 项目结构 1 2 3 4 5 6 7 8 |- src |- components |- Header |- List |- Item |- Footer |- App.jsx |- index.js 示例代码 总结： 1、拆分组件、实现静态组件，注意className、style的写法 2、动态初始化列表，如何确定将数据放在哪个组件的state中 1）某个组件使用，放在其自身的sate中 2）某些组件使用，放在它</description>
    </item>
    
    <item>
      <title>Learn React 04</title>
      <link>https://www.huangzhishou.com/post/Learn-React-04.html</link>
      <pubDate>Sat, 29 Jan 2022 09:36:59 +0800</pubDate>
      
      <guid>https://www.huangzhishou.com/post/Learn-React-04.html</guid>
      <description>React 使用 create-react-app 创建 react 应用 1、关于 react 脚手架 react 脚手架是用于帮助程序员快速创建一个基于 react 库的模板项目 包含了所有需要的配置(语法检查、jsx编译、devServer) 下载好了所有相关的依赖 可以直接运行一个简单效果 react 提供了一个用于创建 react 项目的脚手架库 create-react-app 项目的整体技术架构为：react + webpack + es6 + eslint</description>
    </item>
    
    <item>
      <title>Learn React 03</title>
      <link>https://www.huangzhishou.com/post/Learn-React-03.html</link>
      <pubDate>Fri, 28 Jan 2022 11:07:23 +0800</pubDate>
      
      <guid>https://www.huangzhishou.com/post/Learn-React-03.html</guid>
      <description>React key的作用 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 // 使用index索引值作为key // 初始数据： {id:1,name:&amp;#39;小张&amp;#39;,age:18}, {id:2,name:&amp;#39;小李&amp;#39;,age:19} // 初始的虚拟DOM： &amp;lt;li key=0&amp;gt;小张---18&amp;lt</description>
    </item>
    
    <item>
      <title>Learn React 02</title>
      <link>https://www.huangzhishou.com/post/Learn-React-02.html</link>
      <pubDate>Thu, 27 Jan 2022 11:13:23 +0800</pubDate>
      
      <guid>https://www.huangzhishou.com/post/Learn-React-02.html</guid>
      <description>React 生命周期函数 1、生命周期函数(旧) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 class Count extends</description>
    </item>
    
    <item>
      <title>Learn React 01</title>
      <link>https://www.huangzhishou.com/post/Learn-React-01.html</link>
      <pubDate>Thu, 27 Jan 2022 11:11:30 +0800</pubDate>
      
      <guid>https://www.huangzhishou.com/post/Learn-React-01.html</guid>
      <description>React 基础语法 1、万物皆可HelloWorld 1 2 3 4 // 1.创建虚拟DOM const VDOM = &amp;lt;h1&amp;gt;HelloWorld&amp;lt;h1/&amp;gt; // 2.渲染虚拟DOM到页面 ReactDOM.render(VDOM,document.getElementById(&amp;#39;app&amp;#39;)) 示例代码：HelloWorld 2、虚拟DOM的两种创建方式 使用jsx创建虚拟DOM 1 2 3 4 5 6 7 8 // 1.创建虚拟DOM const VDOM = ( &amp;lt;h1 id=&amp;#34;title&amp;#34;&amp;gt; &amp;lt;span&amp;gt;hello react&amp;lt;/span&amp;gt; &amp;lt;/h1&amp;gt; ) // 2.渲染虚拟DOM到页面 ReactDOM.render(VDOM, document.getElementById(&amp;#39;app&amp;#39;)) 示例代</description>
    </item>
    
    <item>
      <title>在windows下，vscode 1.60.0版本修改默认终端为git bash</title>
      <link>https://www.huangzhishou.com/post/%E5%9C%A8windows%E4%B8%8Bvscode-1.60.0%E7%89%88%E6%9C%AC%E4%BF%AE%E6%94%B9%E9%BB%98%E8%AE%A4%E7%BB%88%E7%AB%AF%E4%B8%BAgit-bash.html</link>
      <pubDate>Fri, 17 Sep 2021 19:26:29 +0800</pubDate>
      
      <guid>https://www.huangzhishou.com/post/%E5%9C%A8windows%E4%B8%8Bvscode-1.60.0%E7%89%88%E6%9C%AC%E4%BF%AE%E6%94%B9%E9%BB%98%E8%AE%A4%E7%BB%88%E7%AB%AF%E4%B8%BAgit-bash.html</guid>
      <description>在windows下，vscode 1.60.0版本修改默认终端为git bash 在windows下，更新了1.60.0版本的vscode后，原有的修改默认终端的配置失效了。 下面为您展示如何在新版本的vscode中修改默认的终端为git bash: 一、找到settings.json配置文件 二、添加配置</description>
    </item>
    
    <item>
      <title>Hugo构建个人博客</title>
      <link>https://www.huangzhishou.com/post/Hugo%E6%9E%84%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2.html</link>
      <pubDate>Fri, 27 Aug 2021 11:26:47 +0800</pubDate>
      
      <guid>https://www.huangzhishou.com/post/Hugo%E6%9E%84%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2.html</guid>
      <description>博客构建之路 一、安装Hugo 到Hugo Releases下载对应的操作系统版本的Hugo二进制文件(hugo或hugo.exe) 配置环境变量 二、生成站点 使用Hugo快速生成站点，比如希望生成到e/Desktop/zhishouH路径： $ hugo new site /e/Desktop/zhishouH 这样就在e/Desdktop/zhis</description>
    </item>
    
    <item>
      <title>关于我</title>
      <link>https://www.huangzhishou.com/about.html</link>
      <pubDate>Fri, 27 Aug 2021 11:20:28 +0800</pubDate>
      
      <guid>https://www.huangzhishou.com/about.html</guid>
      <description>练习时长两年半的前端实习生🙎‍♂️</description>
    </item>
    
    <item>
      <title>归档</title>
      <link>https://www.huangzhishou.com/archives.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.huangzhishou.com/archives.html</guid>
      <description></description>
    </item>
    
    <item>
      <title>搜索</title>
      <link>https://www.huangzhishou.com/search.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.huangzhishou.com/search.html</guid>
      <description></description>
    </item>
    
  </channel>
</rss>

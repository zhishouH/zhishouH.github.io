<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>JavaScript on 黄智守的博客</title>
    <link>https://www.huangzhishou.com/categories/JavaScript.html</link>
    <description>Recent content in JavaScript on 黄智守的博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Mon, 20 Jun 2022 09:23:11 +0800</lastBuildDate><atom:link href="https://www.huangzhishou.com/categories/JavaScript/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>深入JavaScript高级语法之寄生组合式继承</title>
      <link>https://www.huangzhishou.com/post/%E6%B7%B1%E5%85%A5JavaScript%E9%AB%98%E7%BA%A7%E8%AF%AD%E6%B3%95%E4%B9%8B%E5%AF%84%E7%94%9F%E7%BB%84%E5%90%88%E5%BC%8F%E7%BB%A7%E6%89%BF.html</link>
      <pubDate>Mon, 20 Jun 2022 09:23:11 +0800</pubDate>
      
      <guid>https://www.huangzhishou.com/post/%E6%B7%B1%E5%85%A5JavaScript%E9%AB%98%E7%BA%A7%E8%AF%AD%E6%B3%95%E4%B9%8B%E5%AF%84%E7%94%9F%E7%BB%84%E5%90%88%E5%BC%8F%E7%BB%A7%E6%89%BF.html</guid>
      <description>​ 深入JavaScript高级语法之寄生组合式继承 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 function inheritPrototype(subType, SuperType) { subType.prototype = Object.create(SuperType.prototype) Object.defineProperty(subType.prototype, &amp;#39;constructor&amp;#39;, { enumerable: false, configurable: true, writable: trur, value: subType }) } // 父类 function Person(name, age) { this.name = name this.age = age } Person.prototype.eating = function() { console.log(this.name + &amp;#39; eating~&amp;#39;) } Person.prototype.running = function() { console.log(this.name + &amp;#39; running~&amp;#39;) } // 子类 function Student(name, age, sno) { Person.call(this, name, age) this.sno = sno } inheritPrototype(Student, Person) Student.prototype.studying = function() { consol</description>
    </item>
    
    <item>
      <title>深入JavaScript高级语法之原型链的继承方案</title>
      <link>https://www.huangzhishou.com/post/%E6%B7%B1%E5%85%A5JavaScript%E9%AB%98%E7%BA%A7%E8%AF%AD%E6%B3%95%E4%B9%8B%E5%8E%9F%E5%9E%8B%E9%93%BE%E7%9A%84%E7%BB%A7%E6%89%BF%E6%96%B9%E6%A1%88.html</link>
      <pubDate>Fri, 17 Jun 2022 17:59:00 +0800</pubDate>
      
      <guid>https://www.huangzhishou.com/post/%E6%B7%B1%E5%85%A5JavaScript%E9%AB%98%E7%BA%A7%E8%AF%AD%E6%B3%95%E4%B9%8B%E5%8E%9F%E5%9E%8B%E9%93%BE%E7%9A%84%E7%BB%A7%E6%89%BF%E6%96%B9%E6%A1%88.html</guid>
      <description>深入JavaScript高级语法之原型链的继承方案 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 // 父类 function Person(name) { this.name = name } Person.prototype.eating = function(){ console.log(this.name + &amp;#39; eating~&amp;#39;) } // 子类 function Student(name,sno) { Person.call(this, name) this.sno = sno } Student.prototype = new Person() Student.prototype.studying = function() { console.log(this.name + ’ studying~‘) } var s1 = new Student(&amp;#39;hn&amp;#39;) s1.eating() // hn eating~ s1.studying() // hn studying~ // 弊端 // 1、Person函数被调用了两次 // 2、</description>
    </item>
    
    <item>
      <title>深入JavaScript高级语法之创建对象方案</title>
      <link>https://www.huangzhishou.com/post/%E6%B7%B1%E5%85%A5JavaScript%E9%AB%98%E7%BA%A7%E8%AF%AD%E6%B3%95%E4%B9%8B%E5%88%9B%E5%BB%BA%E5%AF%B9%E8%B1%A1%E6%96%B9%E6%A1%88.html</link>
      <pubDate>Fri, 17 Jun 2022 11:41:39 +0800</pubDate>
      
      <guid>https://www.huangzhishou.com/post/%E6%B7%B1%E5%85%A5JavaScript%E9%AB%98%E7%BA%A7%E8%AF%AD%E6%B3%95%E4%B9%8B%E5%88%9B%E5%BB%BA%E5%AF%B9%E8%B1%A1%E6%96%B9%E6%A1%88.html</guid>
      <description>深入JavaScript高级语法之创建对象方案 原型与构造函数 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 function Person(name, age, height, address) { this.name = name this.age = age this.height = height this.address = address } Person.prototype.eating = function() { console.log(this.name + &amp;#39;在吃东西&amp;#39;) } Person.prototype.running = function() { console.log(this.name + &amp;#39;在跑步&amp;#39;) } var p1 = new Person(&amp;#39;zhishouh&amp;#39;, 20, 1.88, &amp;#39;广州市&amp;#39;) var p2 = new Person(&amp;#39;hn&amp;#39;, 21,</description>
    </item>
    
    <item>
      <title>深入JavaScript高级语法之创建对象</title>
      <link>https://www.huangzhishou.com/post/%E6%B7%B1%E5%85%A5JavaScript%E9%AB%98%E7%BA%A7%E8%AF%AD%E6%B3%95%E4%B9%8B%E5%88%9B%E5%BB%BA%E5%AF%B9%E8%B1%A1.html</link>
      <pubDate>Thu, 09 Jun 2022 10:10:42 +0800</pubDate>
      
      <guid>https://www.huangzhishou.com/post/%E6%B7%B1%E5%85%A5JavaScript%E9%AB%98%E7%BA%A7%E8%AF%AD%E6%B3%95%E4%B9%8B%E5%88%9B%E5%BB%BA%E5%AF%B9%E8%B1%A1.html</guid>
      <description>深入JavaScript高级语法之创建对象 工厂模式(工厂函数) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 function createPerson(name, age, height, address) { return { name, age, height, address, eating() { console.log(this.name + &amp;#39;在吃东西&amp;#39;) }, running() { conosle.log(this.name + &amp;#39;在跑步&amp;#39;) } } } var p1 = createPerson(&amp;#39;zhishouh&amp;#39;, 20, 1.88, &amp;#39;广州市&amp;#39;) console.log(p1) // { // name: &amp;#39;zhishouh&amp;#39;, // age: 21, // height:</description>
    </item>
    
    <item>
      <title>深入JavaScript高级语法之对象</title>
      <link>https://www.huangzhishou.com/post/%E6%B7%B1%E5%85%A5JavaScript%E9%AB%98%E7%BA%A7%E8%AF%AD%E6%B3%95%E4%B9%8B%E5%AF%B9%E8%B1%A1.html</link>
      <pubDate>Thu, 09 Jun 2022 09:28:06 +0800</pubDate>
      
      <guid>https://www.huangzhishou.com/post/%E6%B7%B1%E5%85%A5JavaScript%E9%AB%98%E7%BA%A7%E8%AF%AD%E6%B3%95%E4%B9%8B%E5%AF%B9%E8%B1%A1.html</guid>
      <description>深入JavaScript高级语法之对象 对象写法 写法一 1 2 3 4 5 6 var obj = new Object() obj.name = &amp;#39;zhishouh&amp;#39; obj.age = 20 obj.address = &amp;#39;广州市&amp;#39; console.log(obj) // { name: &amp;#39;zhishouh&amp;#39;, age: 20, address: &amp;#39;广州市&amp;#39; } 写法二 1 2 3 4 5 6 7 var obj = { name: &amp;#39;zhishouh&amp;#39;, age: 20, address: &amp;#39;广州市&amp;#39; } console.log(obj) // { name: &amp;#39;zhishouh&amp;#39;, age: 20, address: &amp;#39;广州市&amp;#39;} 数据属性描</description>
    </item>
    
    <item>
      <title>深入JavaScript高级语法之with Eval Strict</title>
      <link>https://www.huangzhishou.com/post/%E6%B7%B1%E5%85%A5JavaScript%E9%AB%98%E7%BA%A7%E8%AF%AD%E6%B3%95%E4%B9%8Bwith-eval-strict.html</link>
      <pubDate>Thu, 09 Jun 2022 09:11:10 +0800</pubDate>
      
      <guid>https://www.huangzhishou.com/post/%E6%B7%B1%E5%85%A5JavaScript%E9%AB%98%E7%BA%A7%E8%AF%AD%E6%B3%95%E4%B9%8Bwith-eval-strict.html</guid>
      <description>深入JavaScript高级语法之with Eval Strict with语句 with语句会形成作用域 是混淆错误和兼容性问题的根源 1 2 3 4 5 6 7 8 9 10 11 12 13 14 var message = &amp;#39;window hello&amp;#39; var obj = { message: &amp;#39;obj hello&amp;#39; } function foo() { function bar() { with(obj) { console.log(message) } } bar() } foo() // obj hello eval函数 将传入的字符串当作JavaScript代码运行 可读性差 执行过程可能被可</description>
    </item>
    
    <item>
      <title>深入JavaScript高级语法之组合函数</title>
      <link>https://www.huangzhishou.com/post/%E6%B7%B1%E5%85%A5JavaScript%E9%AB%98%E7%BA%A7%E8%AF%AD%E6%B3%95%E4%B9%8B%E7%BB%84%E5%90%88%E5%87%BD%E6%95%B0.html</link>
      <pubDate>Wed, 08 Jun 2022 10:52:29 +0800</pubDate>
      
      <guid>https://www.huangzhishou.com/post/%E6%B7%B1%E5%85%A5JavaScript%E9%AB%98%E7%BA%A7%E8%AF%AD%E6%B3%95%E4%B9%8B%E7%BB%84%E5%90%88%E5%87%BD%E6%95%B0.html</guid>
      <description>深入JavaScript高级语法之组合函数 组合函数 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 function double(x) { return x * 2 } function square(y) { return y ** 2 } function composFn(m, n) { return function(count) { return n(m(count)) } } var newFn = composFn(double, square) console.log(newFn(10)) // 400 实现自动化组合函数 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 function myCompose(...fns) { var length = fns.length for(var i = 0; i &amp;lt; length; i++) { if(typeof fns[i] !== &amp;#39;function&amp;#39;) { throw new TypeError(&amp;#34;Expected arguments are functions&amp;#34;)</description>
    </item>
    
    <item>
      <title>深入JavaScript高级语法之柯里化函数的实现</title>
      <link>https://www.huangzhishou.com/post/%E6%B7%B1%E5%85%A5JavaScript%E9%AB%98%E7%BA%A7%E8%AF%AD%E6%B3%95%E4%B9%8B%E6%9F%AF%E9%87%8C%E5%8C%96%E5%87%BD%E6%95%B0%E7%9A%84%E5%AE%9E%E7%8E%B0.html</link>
      <pubDate>Tue, 07 Jun 2022 17:02:52 +0800</pubDate>
      
      <guid>https://www.huangzhishou.com/post/%E6%B7%B1%E5%85%A5JavaScript%E9%AB%98%E7%BA%A7%E8%AF%AD%E6%B3%95%E4%B9%8B%E6%9F%AF%E9%87%8C%E5%8C%96%E5%87%BD%E6%95%B0%E7%9A%84%E5%AE%9E%E7%8E%B0.html</guid>
      <description>深入JavaScript高级语法之柯里化函数的实现 自动柯里化函数的实现 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 function myCurrying(fn) { function curried1(...args1) { // 判断当前接收的参数个数与函数本身需要接收的个数是否一致 if(args1.length &amp;gt;= fn.length) { return fn.apply(this, args1) } else { function curried2(...args2) { return curried1.apply(this, [...args1, ...args2]) } return curried2 } } return curried1 } function add(x, y, z) { return x + y + z } var curryAdd = myCurrying(add) console.log(curryAdd(10, 20, 30)) // 60 console.log(curryAdd(10, 20)(30))</description>
    </item>
    
    <item>
      <title>深入JavaScript高级语法之函数柯里化</title>
      <link>https://www.huangzhishou.com/post/%E6%B7%B1%E5%85%A5JavaScript%E9%AB%98%E7%BA%A7%E8%AF%AD%E6%B3%95%E4%B9%8B%E5%87%BD%E6%95%B0%E6%9F%AF%E9%87%8C%E5%8C%96.html</link>
      <pubDate>Wed, 01 Jun 2022 14:14:29 +0800</pubDate>
      
      <guid>https://www.huangzhishou.com/post/%E6%B7%B1%E5%85%A5JavaScript%E9%AB%98%E7%BA%A7%E8%AF%AD%E6%B3%95%E4%B9%8B%E5%87%BD%E6%95%B0%E6%9F%AF%E9%87%8C%E5%8C%96.html</guid>
      <description>深入JavaScript高级语法之函数柯里化 函数柯里化 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 function sum(x) { return function(y) { return function(z) { return x + y + z } } } var result = sum(10)(20)(30) console.log(result) // 60 // 简化柯里化函数 function sum2 = x =&amp;gt; y =&amp;gt; z =&amp;gt; x + y + z console.log(sum2(10)(20)(30)) // 60 函数柯里化 —— 单一职责的原则 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 function add(x, y, z) { x = x + 2 y = y + 2</description>
    </item>
    
    <item>
      <title>深入JavaScript高级语法之纯函数</title>
      <link>https://www.huangzhishou.com/post/%E6%B7%B1%E5%85%A5JavaScript%E9%AB%98%E7%BA%A7%E8%AF%AD%E6%B3%95%E4%B9%8B%E7%BA%AF%E5%87%BD%E6%95%B0.html</link>
      <pubDate>Wed, 01 Jun 2022 14:05:33 +0800</pubDate>
      
      <guid>https://www.huangzhishou.com/post/%E6%B7%B1%E5%85%A5JavaScript%E9%AB%98%E7%BA%A7%E8%AF%AD%E6%B3%95%E4%B9%8B%E7%BA%AF%E5%87%BD%E6%95%B0.html</guid>
      <description>深入JavaScript高级语法之纯函数 纯函数 确定的输入，一定会产生确定的输出 函数在执行过程中，不能产生副作用 1 2 3 4 5 6 7 8 9 10 11 var names = [&amp;#39;abc&amp;#39;, &amp;#39;bbc&amp;#39;, &amp;#39;cbc&amp;#39;, &amp;#39;dbc&amp;#39;] // 纯函数 slice 截取，不会对原数组有所改动 var newNames = names.slice(0, 2) console.log(newNames) // [&amp;#39;abc&amp;#39;, &amp;#39;bbc&amp;#39;] console.lgo(names) // [&amp;#39;abc&amp;#39;, &amp;#39;bbc&amp;#39;, &amp;#39;cbc&amp;#39;, &amp;#39;dbc&amp;#39;] // 非纯函数 splice 截取并删除 var newNames2 = names.splice(2,1) console.log(newNames2) // [&amp;#39;cbc&amp;#39;] console.log(names) // [&amp;#39;abc&amp;#39;, &amp;#39;bbc&amp;#39;, &amp;#39;dbc&amp;#39;] 1 2 3 4 5 6 7 8 9 // 举</description>
    </item>
    
    <item>
      <title>深入JavaScript高级语法之实现bind</title>
      <link>https://www.huangzhishou.com/post/%E6%B7%B1%E5%85%A5JavaScript%E9%AB%98%E7%BA%A7%E8%AF%AD%E6%B3%95%E4%B9%8B%E5%AE%9E%E7%8E%B0bind.html</link>
      <pubDate>Tue, 31 May 2022 11:58:46 +0800</pubDate>
      
      <guid>https://www.huangzhishou.com/post/%E6%B7%B1%E5%85%A5JavaScript%E9%AB%98%E7%BA%A7%E8%AF%AD%E6%B3%95%E4%B9%8B%E5%AE%9E%E7%8E%B0bind.html</guid>
      <description>深入JavaScript高级语法之实现bind 实现一个bind 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 Function.prototype.mybind = function (thisArg, ...argArray) { // 获取被执行的函数 var fn = this // 对thisArg转成对象类型(防止传入的是非对象类型) thisArg = (thisArg !== null &amp;amp;&amp;amp; thisArg !== undefined) ? Object(thisArg) : window // 调用被执行的函数 return function (...args) { thisArg.fn =</description>
    </item>
    
    <item>
      <title>深入JavaScript高级语法之实现apply</title>
      <link>https://www.huangzhishou.com/post/%E6%B7%B1%E5%85%A5JavaScript%E9%AB%98%E7%BA%A7%E8%AF%AD%E6%B3%95%E4%B9%8B%E5%AE%9E%E7%8E%B0apply.html</link>
      <pubDate>Tue, 31 May 2022 10:49:19 +0800</pubDate>
      
      <guid>https://www.huangzhishou.com/post/%E6%B7%B1%E5%85%A5JavaScript%E9%AB%98%E7%BA%A7%E8%AF%AD%E6%B3%95%E4%B9%8B%E5%AE%9E%E7%8E%B0apply.html</guid>
      <description>深入JavaScript高级语法之实现apply 实现一个apply 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 Function.prototype.myapply = function (thisArg, argArray) { // 获取被执行的函数 var fn = thisx // 对thisArg转成对象类型(防止传入的是非对象类型) thisArg = (thisArg !== null &amp;amp;&amp;amp; thisArg !== undefined) ? Object(thisArg) : window // 调用被执行的函数 thisArg.fn = fn argArray =</description>
    </item>
    
    <item>
      <title>深入JavaScript高级语法之实现call</title>
      <link>https://www.huangzhishou.com/post/%E6%B7%B1%E5%85%A5JavaScript%E9%AB%98%E7%BA%A7%E8%AF%AD%E6%B3%95%E4%B9%8B%E5%AE%9E%E7%8E%B0call.html</link>
      <pubDate>Tue, 24 May 2022 17:38:08 +0800</pubDate>
      
      <guid>https://www.huangzhishou.com/post/%E6%B7%B1%E5%85%A5JavaScript%E9%AB%98%E7%BA%A7%E8%AF%AD%E6%B3%95%E4%B9%8B%E5%AE%9E%E7%8E%B0call.html</guid>
      <description>深入JavaScript高级语法之实现call 实现一个call 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 Function.prototype.mycall = function (thisArg, ...args /*剩余参数*/) { // 获取被执行的函数 var fn = this // 对thisArg转成对象类型(防止传入的是非对象类型) thisArg = (thisArg !== null &amp;amp;&amp;amp; thisArg !== undefined) ? Object(thisArg) : window // 调用被执行</description>
    </item>
    
    <item>
      <title>深入JavaScript高级语法之关于this的练习题</title>
      <link>https://www.huangzhishou.com/post/%E6%B7%B1%E5%85%A5JavaScript%E9%AB%98%E7%BA%A7%E8%AF%AD%E6%B3%95%E4%B9%8B%E5%85%B3%E4%BA%8Ethis%E7%9A%84%E7%BB%83%E4%B9%A0%E9%A2%98.html</link>
      <pubDate>Mon, 23 May 2022 14:01:25 +0800</pubDate>
      
      <guid>https://www.huangzhishou.com/post/%E6%B7%B1%E5%85%A5JavaScript%E9%AB%98%E7%BA%A7%E8%AF%AD%E6%B3%95%E4%B9%8B%E5%85%B3%E4%BA%8Ethis%E7%9A%84%E7%BB%83%E4%B9%A0%E9%A2%98.html</guid>
      <description>深入JavaScript高级语法之关于this的练习题 练习题一 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 var name = &amp;#39;window&amp;#39; var person = { name: &amp;#39;person&amp;#39;, sayName: function () { console.log(this.name) } } function sayName () { var test = person.sayName test() // window 默认绑定(独立函数调用) person.sayName(); // person 隐式绑定 (person.sayName)(); // person 隐式绑定 (b = person.sayName)() // window 间接函数调用(独立函数调用) } sayName() 练习题二 1 2 3 4 5 6 7 8 9 10 11 12</description>
    </item>
    
    <item>
      <title>深入JavaScript高级语法之箭头函数的使用</title>
      <link>https://www.huangzhishou.com/post/%E6%B7%B1%E5%85%A5JavaScript%E9%AB%98%E7%BA%A7%E8%AF%AD%E6%B3%95%E4%B9%8B%E7%AE%AD%E5%A4%B4%E5%87%BD%E6%95%B0%E7%9A%84%E4%BD%BF%E7%94%A8.html</link>
      <pubDate>Mon, 23 May 2022 13:36:17 +0800</pubDate>
      
      <guid>https://www.huangzhishou.com/post/%E6%B7%B1%E5%85%A5JavaScript%E9%AB%98%E7%BA%A7%E8%AF%AD%E6%B3%95%E4%B9%8B%E7%AE%AD%E5%A4%B4%E5%87%BD%E6%95%B0%E7%9A%84%E4%BD%BF%E7%94%A8.html</guid>
      <description>深入JavaScript高级语法之箭头函数的使用 编写箭头函数 1 2 3 4 5 6 7 8 var foo = () =&amp;gt; { } //在高阶函数中使用箭头函数 var nums = [10, 20, 30] var result = nums.filter(item =&amp;gt; item % 2 === 0) .map(item =&amp;gt; item * 10) .reduce((prevValue, item) =&amp;gt; prevValue + item) console.log(result) // 600 箭头函数的简写规则 1 2 3 4 5 6 // 1、参数只有一个时，()可以省略 // 2、函数体只有一行代码时，{}可以省</description>
    </item>
    
    <item>
      <title>深入JavaScript高级语法之this的绑定规则</title>
      <link>https://www.huangzhishou.com/post/%E6%B7%B1%E5%85%A5JavaScript%E9%AB%98%E7%BA%A7%E8%AF%AD%E6%B3%95%E4%B9%8Bthis%E7%9A%84%E7%BB%91%E5%AE%9A%E8%A7%84%E5%88%99.html</link>
      <pubDate>Mon, 23 May 2022 09:46:29 +0800</pubDate>
      
      <guid>https://www.huangzhishou.com/post/%E6%B7%B1%E5%85%A5JavaScript%E9%AB%98%E7%BA%A7%E8%AF%AD%E6%B3%95%E4%B9%8Bthis%E7%9A%84%E7%BB%91%E5%AE%9A%E8%A7%84%E5%88%99.html</guid>
      <description>深入JavaScript高级语法之this的绑定规则 this的四个绑定规则 默认绑定 1 2 3 4 5 6 7 8 9 function foo() { return function bar() { console.log(this) } } var fn = foo() fn() // window 隐式绑定 1 2 3 4 5 6 7 8 9 10 11 12 13 var foo1 = { name: &amp;#39;foo1&amp;#39;, fn: function() { console.log(this.name) } } var foo2 = { name: &amp;#39;foo2&amp;#39;, fn: foo1.fn } foo2.fn() // foo2 显示绑定 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28</description>
    </item>
    
    <item>
      <title>深入JavaScript高级语法之闭包</title>
      <link>https://www.huangzhishou.com/post/%E6%B7%B1%E5%85%A5JavaScript%E9%AB%98%E7%BA%A7%E8%AF%AD%E6%B3%95%E4%B9%8B%E9%97%AD%E5%8C%85.html</link>
      <pubDate>Mon, 23 May 2022 09:33:38 +0800</pubDate>
      
      <guid>https://www.huangzhishou.com/post/%E6%B7%B1%E5%85%A5JavaScript%E9%AB%98%E7%BA%A7%E8%AF%AD%E6%B3%95%E4%B9%8B%E9%97%AD%E5%8C%85.html</guid>
      <description>深入JavaScript高级语法之闭包 闭包 = 函数 + 可以访问的自由变量 1 2 3 4 5 6 7 8 9 10 11 function foo() { var fnName = &amp;#39;foo&amp;#39; function bar() { console.log(&amp;#39;bar&amp;#39;,fcName) } return bar } var fn = foo() fn() // bar foo 总结 一个普通的函数function，如果可以访问外层作用域的自由变量，那么该函数就是一个闭包 从广义上：JavaScript的函数都是闭包 从狭义上</description>
    </item>
    
    <item>
      <title>深入JavaScript高级语法之数组中的方法</title>
      <link>https://www.huangzhishou.com/post/%E6%B7%B1%E5%85%A5JavaScript%E9%AB%98%E7%BA%A7%E8%AF%AD%E6%B3%95%E4%B9%8B%E6%95%B0%E7%BB%84%E4%B8%AD%E7%9A%84%E6%96%B9%E6%B3%95.html</link>
      <pubDate>Fri, 20 May 2022 10:29:01 +0800</pubDate>
      
      <guid>https://www.huangzhishou.com/post/%E6%B7%B1%E5%85%A5JavaScript%E9%AB%98%E7%BA%A7%E8%AF%AD%E6%B3%95%E4%B9%8B%E6%95%B0%E7%BB%84%E4%B8%AD%E7%9A%84%E6%96%B9%E6%B3%95.html</guid>
      <description>深入JavaScript高级语法之数组中的方法 函数与方法的定义 函数function：独立的function称之为函数，例：function foo() {} 方法method：当一个函数存在于某一个对象时，称之为这个函数是该对象的方法，例：var obj = {foo: function(){}} obj.foo() 数组中的方法(高阶函数) filter方法</description>
    </item>
    
    <item>
      <title>深入JavaScript高级语法之高阶函数</title>
      <link>https://www.huangzhishou.com/post/%E6%B7%B1%E5%85%A5JavaScript%E9%AB%98%E7%BA%A7%E8%AF%AD%E6%B3%95%E4%B9%8B%E9%AB%98%E9%98%B6%E5%87%BD%E6%95%B0.html</link>
      <pubDate>Fri, 20 May 2022 10:04:09 +0800</pubDate>
      
      <guid>https://www.huangzhishou.com/post/%E6%B7%B1%E5%85%A5JavaScript%E9%AB%98%E7%BA%A7%E8%AF%AD%E6%B3%95%E4%B9%8B%E9%AB%98%E9%98%B6%E5%87%BD%E6%95%B0.html</guid>
      <description>深入JavaScript高级语法之高阶函数 高阶函数的定义 函数接受另一个函数作为参数 函数返回另一个函数作为返回值 函数接受另一个函数作为参数 1 2 3 4 5 6 7 8 9 function foo(fn) { fn() } function bar() { console.log(&amp;#39;bar&amp;#39;) } foo(bar) // bar 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 function calc(num1,num2,calcFn) { console.log(calcFn(num1,num2)) } function add(num1,num2) { return num1 + num2 } function sub(num1,num2) { return num1 - num2 } function mul(num1,num2) { return num1 *</description>
    </item>
    
    <item>
      <title>深入JavaScript高级语法之作用域提升</title>
      <link>https://www.huangzhishou.com/post/%E6%B7%B1%E5%85%A5JavaScript%E9%AB%98%E7%BA%A7%E8%AF%AD%E6%B3%95%E4%B9%8B%E4%BD%9C%E7%94%A8%E5%9F%9F%E6%8F%90%E5%8D%87.html</link>
      <pubDate>Fri, 20 May 2022 09:12:18 +0800</pubDate>
      
      <guid>https://www.huangzhishou.com/post/%E6%B7%B1%E5%85%A5JavaScript%E9%AB%98%E7%BA%A7%E8%AF%AD%E6%B3%95%E4%B9%8B%E4%BD%9C%E7%94%A8%E5%9F%9F%E6%8F%90%E5%8D%87.html</guid>
      <description>深入JavaScript高级语法之作用域提升 理解 函数执行 作用域链 示例一 1 2 3 4 5 6 7 8 var n = 10 function foo() { n = 20 } foo() console.log(n) // 20 示例二 1 2 3 4 5 6 7 8 9 10 function foo() { console.log(n) var n = 10 console.log(n) } var n = 20 foo() // undefined // 10 示例三 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 var n = 100 function foo1() { console.log(n) } function foo2() { var n = 200 console.log(n) foo1() } foo2() console.log(n) // 200 // 100 // 100 示例四 1 2</description>
    </item>
    
  </channel>
</rss>
